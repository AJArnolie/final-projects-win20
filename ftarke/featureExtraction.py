#!/usr/bin/env python3
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style

from ShowRepPlot import *

'''
File loads a numpy array generated by the guiTesting_FT.py file.
It then integrates the acceleration data and appends it to the numpy array
to provide velocity as an additional feature for the machine learning algorithm.
It also normalizes the timestamp to seconds starting at 0. It also plots a graph
of the acceleration and velocity for visual comparison. Finally it saves a new
numpy file with the velocity data included.
'''
def main():
    style.use('fivethirtyeight')
    fig, (vx,vy,vz) = plt.subplots(nrows=1,ncols=3)
    filename = input()
    #filename = "Squat_Franklin_275_2020-03-09_02_16_38.npy"
    array = np.load(filename)

    plotArrayFloat = np.array([[float(x) for x in y] for y in array])

    length = np.shape(array)[1]

    time = (plotArrayFloat[9, length - 1] - plotArrayFloat[9, 0]) / 1000

    acc_x = plotArrayFloat[0,:]
    acc_y = plotArrayFloat[1,:]
    acc_z = plotArrayFloat[2,:]


    newtime = np.linspace(0, time, num = np.shape(array)[1])


    v_x = np.zeros(length)
    v_y = np.zeros(length)
    v_z = np.zeros(length)

    i = 0
    for x in np.nditer(acc_x):
        v_x[i+1] = acc_x[i]*(newtime[i+1] - newtime[i]) + v_x[i]
        v_y[i+1] = acc_y[i]*(newtime[i+1] - newtime[i]) + v_y[i]
        v_z[i+1] = acc_z[i]*(newtime[i+1] - newtime[i]) + v_z[i]
        i = i +1
        if i == length - 1:
            break

    vx.clear
    vx.plot(newtime, acc_x)
    vx.plot(newtime, v_x)

    vy.clear
    vy.plot(newtime, acc_y)
    vy.plot(newtime, v_y)

    vz.clear
    vz.plot(newtime, acc_z)
    vz.plot(newtime, v_z)

    vx.title.set_text('X Acc & Vel')
    vy.title.set_text('Y Acc & Vel')
    vz.title.set_text('Z Acc & Vel')


    plt.show()

    plt.close()


    v_x = np.expand_dims(v_x, axis = 0)
    v_y = np.expand_dims(v_y, axis = 0)
    v_z = np.expand_dims(v_z, axis = 0)
    newtime = np.expand_dims(newtime, axis = 0)

    finalarray = np.append(array[0:8], v_x, axis = 0)
    finalarray = np.append(finalarray, v_y, axis = 0)
    finalarray = np.append(finalarray, v_z, axis = 0)
    finalarray = np.append(finalarray, newtime, axis = 0)


    np.save("saveFiles/" + filename + '_modified', finalarray)

if __name__ == '__main__':
    main()
